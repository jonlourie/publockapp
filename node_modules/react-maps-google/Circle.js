"use strict";

exports.__esModule = true;
exports["default"] = exports.defaultOptions = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var CALLBACK_MAP = {
  'center_changed': 'onCenterChanged',
  'click': 'onClick',
  'dblclick': 'onDoubleClick',
  'drag': 'onDrag',
  'dragend': 'onDragEnd',
  'dragstart': 'onDragStart',
  'mousedown': 'onMouseDown',
  'mousemove': 'onMouseMove',
  'mouseout': 'onMouseOut',
  'mouseover': 'onMouseOver',
  'mouseup': 'onMouseUp',
  'radius_changed': 'onRadiusChanged',
  'rightclick': 'onRightClick',
  'visible_changed': 'onVisibleChanged',
  'zindex_changed': 'onZIndexChanged'
};
var defaultOptions = {
  fillColor: '#1774ff',
  fillOpacity: 0.2,
  strokeColor: '#1774ff',
  strokeWeight: 2
};
exports.defaultOptions = defaultOptions;

var Circle = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Circle, _Component);

  function Circle() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Circle.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.props.map) {
      this.renderCircle(this.props);
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props = this.props,
        map = _this$props.map,
        center = _this$props.center,
        radius = _this$props.radius,
        options = _this$props.options;
    var renderCircle = false;

    if (map !== prevProps.map) {
      renderCircle = true;
    }

    if (!Object.is(center, prevProps.center)) {
      renderCircle = true;
    }

    if (radius !== prevProps.radius) {
      renderCircle = true;
    }

    if (!Object.is(options, prevProps.options)) {
      renderCircle = true;
    }

    if (renderCircle) {
      this.renderCircle(this.props);
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (!this.circle) {
      return;
    }

    google.maps.event.clearInstanceListeners(this.circle);
    this.circle.setMap(null);
  };

  _proto.onCircleCallback = function onCircleCallback(callback, event) {
    if (this.props[callback]) {
      this.props[callback](this.circle, event);
    }
  };

  _proto.renderCircle = function renderCircle(props) {
    var _this = this;

    var map = props.map,
        options = props.options,
        center = props.center,
        radius = props.radius;

    if (!map) {
      return;
    }

    if (!this.circle) {
      this.circle = new google.maps.Circle(_objectSpread(_objectSpread({}, Object.assign({}, defaultOptions, options)), {}, {
        map: map,
        center: center,
        radius: radius
      }));
      Object.keys(CALLBACK_MAP).forEach(function (key) {
        google.maps.event.addListener(_this.circle, key, _this.onCircleCallback.bind(_this, CALLBACK_MAP[key]));
      });
      return;
    }

    this.circle.setOptions(_objectSpread(_objectSpread({}, Object.assign({}, defaultOptions, options)), {}, {
      map: map,
      center: center,
      radius: radius
    }));
  };

  _proto.render = function render() {
    return null;
  };

  return Circle;
}(_react.Component);

Circle.propTypes = {
  map: _propTypes["default"].object,
  center: _propTypes["default"].object.isRequired,
  radius: _propTypes["default"].number,
  options: _propTypes["default"].object,
  onCenterChanged: _propTypes["default"].func,
  onClick: _propTypes["default"].func,
  onDoubleClick: _propTypes["default"].func,
  onDrag: _propTypes["default"].func,
  onDragEnd: _propTypes["default"].func,
  onDragStart: _propTypes["default"].func,
  onMouseDown: _propTypes["default"].func,
  onMouseMove: _propTypes["default"].func,
  onMouseOut: _propTypes["default"].func,
  onMouseOver: _propTypes["default"].func,
  onMouseUp: _propTypes["default"].func,
  onRadiusChanged: _propTypes["default"].func,
  onRightClick: _propTypes["default"].func,
  onVisibleChange: _propTypes["default"].func,
  onZIndexChange: _propTypes["default"].func
};
Circle.defaultProps = {
  options: defaultOptions,
  radius: 1000,
  onCenterChanged: function onCenterChanged(circle) {},
  onClick: function onClick(circle) {},
  onDoubleClick: function onDoubleClick(circle) {},
  onDrag: function onDrag(circle) {},
  onDragEnd: function onDragEnd(circle) {},
  onDragStart: function onDragStart(circle) {},
  onMouseDown: function onMouseDown(circle) {},
  onMouseMove: function onMouseMove(circle) {},
  onMouseOut: function onMouseOut(circle) {},
  onMouseOver: function onMouseOver(circle) {},
  onMouseUp: function onMouseUp(circle) {},
  onRadiusChanged: function onRadiusChanged(circle) {},
  onRightClick: function onRightClick(circle) {},
  onVisibleChanged: function onVisibleChanged(circle) {},
  onZIndexChanged: function onZIndexChanged(circle) {}
};
var _default = Circle;
exports["default"] = _default;