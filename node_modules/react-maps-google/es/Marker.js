function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
var CALLBACK_MAP = {
  'animation_changed': 'onAnimationChange',
  'click': 'onClick',
  'clickable_changed': 'onClickableChange',
  'cursor_changed': 'onCursorChange',
  'dblclick': 'onDoubleClick',
  'drag': 'onDrag',
  'dragend': 'onDragEnd',
  'draggable_changed': 'onDraggableChange',
  'dragstart': 'onDragStart',
  'flat_changed': 'onFlatChange',
  'icon_changed': 'onIconChange',
  'mousedown': 'onMouseDown',
  'mouseout': 'onMouseOut',
  'mouseover': 'onMouseOver',
  'mouseup': 'onMouseUp',
  'position_changed': 'onPositionChange',
  'rightclick': 'onRightClick',
  'shape_changed': 'onShapeChange',
  'title_changed': 'onTitleChange',
  'visible_changed': 'onVisibleChange',
  'zindex_changed': 'onZIndexChange'
};

var Marker = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Marker, _Component);

  function Marker() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = Marker.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.props.map) {
      this.renderMarker(this.props);
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this$props = this.props,
        map = _this$props.map,
        position = _this$props.position,
        options = _this$props.options;
    var renderMarker = false;

    if (map !== prevProps.map) {
      renderMarker = true;
    }

    if (!Object.is(position, prevProps.position)) {
      renderMarker = true;
    }

    if (!Object.is(options, prevProps.options)) {
      renderMarker = true;
    }

    if (renderMarker) {
      this.renderMarker(this.props);
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (!this.marker) {
      return;
    }

    google.maps.event.clearInstanceListeners(this.marker);
    this.marker.setMap(null);
  };

  _proto.onMarkerCallback = function onMarkerCallback(callback, event) {
    if (this.props[callback]) {
      this.props[callback](this.marker, event);
    }
  };

  _proto.renderMarker = function renderMarker(props) {
    var _this = this;

    var map = props.map,
        options = props.options,
        position = props.position,
        width = props.width,
        height = props.height;

    if (!map) {
      return;
    }

    if (!this.marker) {
      this.marker = new google.maps.Marker(_objectSpread(_objectSpread({}, options), {}, {
        map: map,
        position: position
      }));
      Object.keys(CALLBACK_MAP).forEach(function (key) {
        google.maps.event.addListener(_this.marker, key, _this.onMarkerCallback.bind(_this, CALLBACK_MAP[key]));
      });
      return;
    }

    this.marker.setOptions(_objectSpread(_objectSpread({}, options), {}, {
      map: map,
      position: position
    }));
  };

  _proto.render = function render() {
    return null;
  };

  return Marker;
}(Component);

Marker.propTypes = {
  map: PropTypes.object,
  options: PropTypes.object,
  position: PropTypes.object.isRequired,
  onAnimationChange: PropTypes.func,
  onClick: PropTypes.func,
  onClickableChange: PropTypes.func,
  onCursorChange: PropTypes.func,
  onDoubleClick: PropTypes.func,
  onDrag: PropTypes.func,
  onDragEnd: PropTypes.func,
  onDraggableChange: PropTypes.func,
  onDragStart: PropTypes.func,
  onFlatChange: PropTypes.func,
  onIconChange: PropTypes.func,
  onMouseDown: PropTypes.func,
  onMouseOut: PropTypes.func,
  onMouseOver: PropTypes.func,
  onMouseUp: PropTypes.func,
  onPositionChange: PropTypes.func,
  onRightClick: PropTypes.func,
  onShapeChange: PropTypes.func,
  onTitleChange: PropTypes.func,
  onVisibleChange: PropTypes.func,
  onZIndexChange: PropTypes.func
};
Marker.defaultProps = {
  options: {},
  onAnimationChange: function onAnimationChange(marker) {},
  onClick: function onClick(marker, event) {},
  onClickableChange: function onClickableChange(marker) {},
  onCursorChange: function onCursorChange(marker) {},
  onDoubleClick: function onDoubleClick(marker, event) {},
  onDrag: function onDrag(marker, event) {},
  onDragEnd: function onDragEnd(marker, event) {},
  onDraggableChange: function onDraggableChange(marker) {},
  onDragStart: function onDragStart(marker, event) {},
  onFlatChange: function onFlatChange(marker) {},
  onIconChange: function onIconChange(marker) {},
  onMouseDown: function onMouseDown(marker, event) {},
  onMouseOut: function onMouseOut(marker, event) {},
  onMouseOver: function onMouseOver(marker, event) {},
  onMouseUp: function onMouseUp(marker, event) {},
  onPositionChange: function onPositionChange(marker) {},
  onRightClick: function onRightClick(marker, event) {},
  onShapeChange: function onShapeChange(marker) {},
  onTitleChange: function onTitleChange(marker) {},
  onVisibleChange: function onVisibleChange(marker) {},
  onZIndexChange: function onZIndexChange(marker) {}
};
export default Marker;