function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import Script from 'react-load-script';
import cleanProps from 'clean-react-props';
var EXCLUDE_PROPS = ['async', 'defer', 'onClick', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragStart', 'onMouseMove', 'onMouseOut', 'onMouseOver'];
var CALLBACK_MAP = {
  'bounds_changed': 'onBoundsChange',
  'center_changed': 'onCenterChange',
  'click': 'onClick',
  'dblclick': 'onDoubleClick',
  'drag': 'onDrag',
  'dragend': 'onDragEnd',
  'dragstart': 'onDragStart',
  'heading_changed': 'onHeadingChange',
  'idle': 'onIdle',
  'maptypeid_change': 'onMapTypeIdChange',
  'mousemove': 'onMouseMove',
  'mouseout': 'onMouseOut',
  'mouseover': 'onMouseOver',
  'projection_changed': 'onProjectionChange',
  'rightclick': 'onRightClick',
  'tilesloaded': 'onTilesLoad',
  'tilt_changed': 'onTiltChange',
  'zoom_changed': 'onZoomChange'
};

if (typeof window !== 'undefined') {
  window['reactMapsGoogleInstances'] = [];

  window['reactMapsGoogleInit'] = function () {
    window['reactMapsGoogleInstances'].forEach(function (instance) {
      return instance();
    });
  };
}

var GoogleMap = /*#__PURE__*/function (_Component) {
  _inheritsLoose(GoogleMap, _Component);

  function GoogleMap(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    var scriptLoaded = typeof window !== 'undefined' && window.google && window.google.maps && window.google.maps.Map ? true : false;
    _this.state = {
      map: null,
      scriptLoaded: scriptLoaded
    };
    _this.onScriptLoad = _this.onScriptLoad.bind(_assertThisInitialized(_this));
    _this.onScriptInit = _this.onScriptInit.bind(_assertThisInitialized(_this));

    if (typeof window !== 'undefined') {
      window['reactMapsGoogleInstances'].push(_this.onScriptInit);
    }

    return _this;
  }

  var _proto = GoogleMap.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.renderMap();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.refreshMapSettings(this.props);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var map = this.state.map;

    if (!map) {
      return;
    }

    google.maps.event.clearInstanceListeners(map);
  };

  _proto.refreshMapSettings = function refreshMapSettings(props) {
    var map = this.state.map;

    if (!map) {
      return;
    }

    var options = props.options;
    map.setOptions(options);
  };

  _proto.onScriptLoad = function onScriptLoad() {
    this.setState({
      scriptLoaded: true
    });
  };

  _proto.onScriptInit = function onScriptInit() {
    this.renderMap();
  };

  _proto.onMapCallback = function onMapCallback(callback, event) {
    var map = this.state.map;
    this.props[callback](map, event);
  };

  _proto.renderMap = function renderMap() {
    var _this2 = this;

    if (this.state.map) {
      return false;
    }

    if (!window.google || !window.google.maps || !window.google.maps.Map) {
      return false;
    }

    var _this$props = this.props,
        options = _this$props.options,
        onReady = _this$props.onReady;
    var mapElement = ReactDOM.findDOMNode(this.mapRef);

    if (!mapElement) {
      return false;
    }

    var map = new google.maps.Map(mapElement, options);
    Object.keys(CALLBACK_MAP).forEach(function (key) {
      google.maps.event.addListener(map, key, _this2.onMapCallback.bind(_this2, CALLBACK_MAP[key]));
    });
    this.setState({
      map: map
    });
    onReady(map);
    return true;
  };

  _proto.render = function render() {
    var _this3 = this;

    var _this$props2 = this.props,
        apiKey = _this$props2.apiKey,
        children = _this$props2.children;
    var _this$state = this.state,
        map = _this$state.map,
        scriptLoaded = _this$state.scriptLoaded;
    var clonedChildren = React.Children.toArray(children).map(function (child) {
      return /*#__PURE__*/React.cloneElement(child, {
        map: map
      });
    });
    return /*#__PURE__*/React.createElement(React.Fragment, null, scriptLoaded === false && /*#__PURE__*/React.createElement(Script, {
      url: "https://maps.googleapis.com/maps/api/js?key=" + apiKey + "&callback=reactMapsGoogleInit",
      onLoad: this.onScriptLoad,
      async: this.props.async ? "async" : false,
      defer: this.props.defer ? "defer" : false
    }), /*#__PURE__*/React.createElement("div", _extends({}, cleanProps(this.props, EXCLUDE_PROPS), {
      ref: function ref(element) {
        return _this3.mapRef = element;
      },
      style: {
        height: '100%'
      }
    })), clonedChildren);
  };

  return GoogleMap;
}(Component);

GoogleMap.propTypes = {
  apiKey: PropTypes.string.isRequired,
  async: PropTypes.bool,
  options: PropTypes.object,
  onBoundsChange: PropTypes.func,
  onCenterChange: PropTypes.func,
  onClick: PropTypes.func,
  onDoubleClick: PropTypes.func,
  onDrag: PropTypes.func,
  onDragEnd: PropTypes.func,
  onDragStart: PropTypes.func,
  onHeadingChange: PropTypes.func,
  onIdle: PropTypes.func,
  onMapTypeIdChange: PropTypes.func,
  onMouseMove: PropTypes.func,
  onMouseOut: PropTypes.func,
  onMouseOver: PropTypes.func,
  onProjectionChange: PropTypes.func,
  onRightClick: PropTypes.func,
  onTilesLoad: PropTypes.func,
  onTiltChange: PropTypes.func,
  onZoomChange: PropTypes.func,
  onReady: PropTypes.func
};
GoogleMap.defaultProps = {
  options: {
    center: {
      lat: 40.730610,
      lng: -73.935242
    },
    zoom: 12
  },
  async: true,
  onBoundsChange: function onBoundsChange() {},
  onCenterChange: function onCenterChange() {},
  onClick: function onClick() {},
  onDoubleClick: function onDoubleClick() {},
  onDrag: function onDrag() {},
  onDragEnd: function onDragEnd() {},
  onDragStart: function onDragStart() {},
  onHeadingChange: function onHeadingChange() {},
  onIdle: function onIdle() {},
  onMapTypeIdChange: function onMapTypeIdChange() {},
  onMouseMove: function onMouseMove() {},
  onMouseOut: function onMouseOut() {},
  onMouseOver: function onMouseOver() {},
  onProjectionChange: function onProjectionChange() {},
  onRightClick: function onRightClick() {},
  onTilesLoad: function onTilesLoad() {},
  onTiltChange: function onTiltChange() {},
  onZoomChange: function onZoomChange() {},
  onReady: function onReady() {}
};
export default GoogleMap;