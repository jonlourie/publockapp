function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Script from 'react-load-script';

var MarkerClusterer = /*#__PURE__*/function (_Component) {
  _inheritsLoose(MarkerClusterer, _Component);

  function MarkerClusterer(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.state = {
      scriptLoaded: false
    };
    _this.onScriptLoad = _this.onScriptLoad.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = MarkerClusterer.prototype;

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.renderMarkerClusterer(this.props);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (!this.markerClusterer) {
      return;
    }

    this.markerClusterer.clearMarkers();
  };

  _proto.onScriptLoad = function onScriptLoad() {
    this.setState({
      scriptLoaded: true
    });
    this.renderMarkerClusterer(this.props);
  };

  _proto.renderMarkerClusterer = function renderMarkerClusterer(props) {
    var map = props.map,
        markers = props.markers;

    if (!map) {
      return;
    }

    if (!this.markerClusterer) {
      this.markerClusterer = new MarkerClusterer(map, markers);
      return;
    }
    /**
     * @todo Review props and apply updates to this.markerClusterer. - Ryan
     */

  };

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(Script, {
      url: "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js",
      onLoad: this.onScriptLoad
    });
  };

  return MarkerClusterer;
}(Component);

MarkerClusterer.propTypes = {
  map: PropTypes.object,
  markers: PropTypes.array,
  options: PropTypes.object,
  onReady: PropTypes.func
};
MarkerClusterer.defaultProps = {
  markers: [],
  options: {},
  onReady: function onReady(markerClusterer) {}
};
export default MarkerClusterer;